import java.util.HashMap;
import java.util.Map;

public class Usuario {
    private final int id;
    private final String nombre;
    private final Map<Integer, Usuario> amigos;
    private final ConjuntoImplement conjuntoAmigos;

    public Usuario(int id, String nombre) {
        this.id = id;
        this.nombre = nombre;
        this.amigos = new HashMap<>();
        this.conjuntoAmigos = new ConjuntoImplement();
        this.conjuntoAmigos.inicializar();
    }

    public int getId() {
        return id;
    }

    public String getNombre() {
        return nombre;
    }

    public Map<Integer, Usuario> getAmigos() {
        return amigos;
    }

    public void agregarAmigo(Usuario otro) {
        if (!conjuntoAmigos.pertenece(otro.getId()) && otro.getId() != this.id) {
            amigos.put(otro.getId(), otro);
            conjuntoAmigos.agregar(otro.getId());
            otro.agregarAmigo(this); // Enlace bidireccional
        }
    }

    public void eliminarAmigo(Usuario otro) {
        if (conjuntoAmigos.pertenece(otro.getId())) {
            amigos.remove(otro.getId());
            conjuntoAmigos.sacar(otro.getId());
            otro.eliminarAmigo(this); // Romper enlace
        }
    }

    public void mostrarAmigos() {
        if (amigos.isEmpty()) {
            System.out.println(nombre + " no tiene amigos.");
        } else {
            System.out.println("Amigos de " + nombre + ":");
            for (Usuario amigo : amigos.values()) {
                System.out.println(" - " + amigo.getNombre());
            }
        }
    }

    @Override
    public String toString() {
        return "ID: " + id + " | Nombre: " + nombre;
    }
}
